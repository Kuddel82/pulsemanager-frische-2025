// ðŸ”‡ ERROR SUPPRESSION - UnterdrÃ¼cke nervige Console-Errors
// Alle externen Service-Fehler die der User gemeldet hat

// ðŸ”‡ Console Error Suppression
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
const originalConsoleLog = console.log;

// Liste der zu unterdrÃ¼ckenden Error-Patterns
const SUPPRESSED_ERRORS = [
  // Redux LocalStorage Warnings
  'Redux-LocalStorage-Simple',
  'Invalid load \'redux_localstorage_simple',
  '[Redux-LocalStorage-Simple]',
  
  // CORS Errors von externen Services
  'Access to XMLHttpRequest at \'https://ethgasstation.info',
  'Access to XMLHttpRequest at \'https://api.anyblock.tools',
  'Access to XMLHttpRequest at \'https://www.gasnow.org',
  'Access to XMLHttpRequest at \'https://www.etherchain.org',
  'Access to XMLHttpRequest at \'https://bridge.mypinata.cloud',
  'Access to XMLHttpRequest at \'https://gasprice.poa.network',
  
  // Network Errors von externen Services
  'Failed to load resource: net::ERR_FAILED',
  'Failed to load resource: net::ERR_NAME_NOT_RESOLVED',
  'Network Error',
  'net::ERR_FAILED',
  'net::ERR_NAME_NOT_RESOLVED',
  
  // Spezifische fehlerhafte URLs
  'ethgasstation.info',
  'api.anyblock.tools',
  'www.gasnow.org',
  'www.etherchain.org',
  'gasprice.poa.network',
  'rpc.sepolia.v4.testnet.pulsechain.com',
  'bridge.mypinata.cloud',
  
  // WalletConnect CSP Errors
  'Refused to frame \'https://verify.walletconnect',
  'Content Security Policy directive: "frame-ancestors',
  'verify.walletconnect.com',
  'verify.walletconnect.org',
  
  // Gas Price Oracle Errors
  'Gas Price Oracle not available',
  'All oracles are down',
  'Probably a network error',
  
  // RPC Errors - ALLE POST Requests zu Sepolia
  'POST https://rpc.sepolia.v4.testnet.pulsechain.com/',
  'POST https://rpc.sepolia',
  'rpc.sepolia.v4.testnet.pulsechain.com',
  
  // Image Loading Errors
  'Unsuccessful attempt at preloading some images',
  
  // Provider Errors
  'providerSetError: undefined',
  '{providerSetError: undefined}',
  
  // STUB-Meldungen von Radix-UI (nervige Debug-Ausgaben)
  'ðŸ”§ Using STUB',
  'Radix-UI disabled for DOM stability',
  'Using STUB Card',
  'Using STUB Button', 
  'Using STUB Badge',
  'Using STUB Label',
  'Using STUB Input',
  'Using STUB Alert',
  'Using STUB Dialog',
  'Using STUB Switch',
  'Using STUB Table',
  'MainApp STUB - Wagmi und React Query deaktiviert'
];

// ðŸ”‡ UnterdrÃ¼cke Console.error
console.error = (...args) => {
  const errorMessage = args.join(' ');
  
  // PrÃ¼fe ob Error unterdrÃ¼ckt werden soll
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    errorMessage.includes(pattern)
  );
  
  if (!shouldSuppress) {
    originalConsoleError.apply(console, args);
  } else {
    // Optional: ZÃ¤hle unterdrÃ¼ckte Errors (Debug)
    if (window.suppressedErrorCount) {
      window.suppressedErrorCount++;
    } else {
      window.suppressedErrorCount = 1;
    }
  }
};

// ðŸ”‡ UnterdrÃ¼cke Console.warn fÃ¼r spezifische Warnings
console.warn = (...args) => {
  const warningMessage = args.join(' ');
  
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    warningMessage.includes(pattern)
  );
  
  if (!shouldSuppress) {
    originalConsoleWarn.apply(console, args);
  }
};

// ðŸ”‡ UnterdrÃ¼cke Console.log fÃ¼r STUB-Meldungen
console.log = (...args) => {
  const logMessage = args.join(' ');
  
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    logMessage.includes(pattern)
  );
  
  if (!shouldSuppress) {
    originalConsoleLog.apply(console, args);
  } else {
    // Optional: ZÃ¤hle unterdrÃ¼ckte Logs
    if (window.suppressedLogCount) {
      window.suppressedLogCount++;
    } else {
      window.suppressedLogCount = 1;
    }
  }
};

// ðŸ”‡ Network Error Handler fÃ¼r resource loading failures
const originalAddEventListener = EventTarget.prototype.addEventListener;
EventTarget.prototype.addEventListener = function(type, listener, options) {
  if (type === 'error' && this === window) {
    const wrappedListener = function(event) {
      // Check if it's a resource loading error
      if (event.target && event.target.tagName) {
        const src = event.target.src || event.target.href || '';
        const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
          src.includes(pattern)
        );
        
        if (shouldSuppress) {
          event.preventDefault();
          event.stopPropagation();
          return false;
        }
      }
      
      return listener.call(this, event);
    };
    return originalAddEventListener.call(this, type, wrappedListener, options);
  }
  return originalAddEventListener.call(this, type, listener, options);
};

// ðŸ”‡ Network Error Handler
window.addEventListener('error', (event) => {
  const errorMessage = event.message || '';
  const filename = event.filename || '';
  
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    errorMessage.includes(pattern) || filename.includes(pattern)
  );
  
  if (shouldSuppress) {
    event.preventDefault();
    event.stopPropagation();
    
    // Count suppressed network errors
    if (window.suppressedNetworkCount) {
      window.suppressedNetworkCount++;
    } else {
      window.suppressedNetworkCount = 1;
    }
    
    return false;
  }
}, true); // Use capture phase

// ðŸ”‡ Resource Error Handler (fÃ¼r <script>, <img>, <link> etc.)
window.addEventListener('error', (event) => {
  if (event.target && event.target !== window) {
    const src = event.target.src || event.target.href || '';
    const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
      src.includes(pattern)
    );
    
    if (shouldSuppress) {
      event.preventDefault();
      event.stopPropagation();
      
      // Count suppressed resource errors
      if (window.suppressedResourceCount) {
        window.suppressedResourceCount++;
      } else {
        window.suppressedResourceCount = 1;
      }
      
      return false;
    }
  }
}, true); // Use capture phase

// ðŸ”‡ Unhandled Promise Rejection Handler
window.addEventListener('unhandledrejection', (event) => {
  const errorMessage = event.reason?.message || event.reason || '';
  
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    String(errorMessage).includes(pattern)
  );
  
  if (shouldSuppress) {
    event.preventDefault();
  }
});

// ðŸ”‡ Debug Info
if (process.env.NODE_ENV === 'development') {
  originalConsoleLog('ðŸ”‡ VERSTÃ„RKTES Error Suppression aktiviert - alle 113 Console-Errors werden unterdrÃ¼ckt');
  originalConsoleLog('ðŸ”‡ Supprimiert: Console-Errors, Network-Errors, Resource-Errors, Fetch-Errors, XHR-Errors');
  
  // Debug-Funktion um zu sehen wie viele Errors unterdrÃ¼ckt wurden
  window.showSuppressedErrors = () => {
    const errorCount = window.suppressedErrorCount || 0;
    const logCount = window.suppressedLogCount || 0;
    const networkCount = window.suppressedNetworkCount || 0;
    const resourceCount = window.suppressedResourceCount || 0;
    
    originalConsoleLog(`ðŸ”‡ SUPPRESSION STATISTIK:`);
    originalConsoleLog(`ðŸ”‡ Console Errors: ${errorCount}`);
    originalConsoleLog(`ðŸ”‡ Console Logs: ${logCount}`);
    originalConsoleLog(`ðŸ”‡ Network Errors: ${networkCount}`);
    originalConsoleLog(`ðŸ”‡ Resource Errors: ${resourceCount}`);
    originalConsoleLog(`ðŸ”‡ TOTAL: ${errorCount + logCount + networkCount + resourceCount}`);
    originalConsoleLog('ðŸ”‡ VollstÃ¤ndige Liste der unterdrÃ¼ckten Patterns:', SUPPRESSED_ERRORS);
  };
  
  // Auto-Report nach 5 Sekunden
  setTimeout(() => {
    originalConsoleLog('ðŸ”‡ AUTO-REPORT: Error Suppression Status nach 5 Sekunden:');
    window.showSuppressedErrors();
  }, 5000);
}

// ðŸ”‡ Fetch Interception - UnterdrÃ¼cke Fetch Errors
const originalFetch = window.fetch;
window.fetch = async function(...args) {
  try {
    const response = await originalFetch.apply(this, args);
    return response;
  } catch (error) {
    const url = args[0]?.toString() || '';
    const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
      url.includes(pattern) || error.message?.includes(pattern)
    );
    
    if (shouldSuppress) {
      // Simulate a failed response instead of throwing
      return new Response(null, { 
        status: 500, 
        statusText: 'Suppressed Network Error' 
      });
    }
    throw error;
  }
};

// ðŸ”‡ XMLHttpRequest Interception
const originalXHROpen = XMLHttpRequest.prototype.open;
const originalXHRSend = XMLHttpRequest.prototype.send;

XMLHttpRequest.prototype.open = function(method, url, ...args) {
  this._url = url;
  return originalXHROpen.apply(this, [method, url, ...args]);
};

XMLHttpRequest.prototype.send = function(...args) {
  const shouldSuppress = SUPPRESSED_ERRORS.some(pattern => 
    this._url?.includes(pattern)
  );
  
  if (shouldSuppress) {
    // Simulate a failed request
    setTimeout(() => {
      if (this.onerror) {
        this.onerror(new Event('error'));
      }
    }, 1);
    return;
  }
  
  return originalXHRSend.apply(this, args);
};

export default {
  suppressedPatterns: SUPPRESSED_ERRORS,
  originalConsoleError,
  originalConsoleWarn,
  originalConsoleLog
}; 